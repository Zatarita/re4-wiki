title: AEV
children: 
  Summary:
    text: >
     <img align="right" src="images/AEV Generic.png" width = 200 height = 200>
     The AEV file is used to define actions a player can take in a room. Each action is given
     a designed trigger area. When an entity is standing in the trigger area they are able to
     interact with the event. Some events happen automatically, while others require the player to press the 
     action button to enable it. Some of the events are linked to hard coded internal functionality and thusly
     aren't easily modifiable. Any event falling in this category is left out until more information 
     can be found out about them.
     <br><br><br><br><br><br><br>

     

     ---
    references: {
    }
  Trigger Volumes:
    text: >
     <img align="left" style="margin:10px" src="images\Volumes\Square Trigger Volume - Points.png" width=100 height=100></img>
     <img align="left" src="images\Volumes\Circular Trigger Volume.png" width=100 height=100></img>
     A trigger volume is a defined area where an entity can initiate an AEV event. Each event has it's own dedicated trigger volume. These volumes have extra metadata used to define it's shape 
     and functionality. There are two primary shapes the trigger area can be, rectangular (default) and circular. When the trigger volume is rectangular the game reads 
     all four points of the rectangle (x, z), the starting Y position for all the points, and the height of the trigger area; however, when the trigger volume is circular
     the game treats the first of the four points as the center of the circle (x, z);
     <img align="left" style="margin:10px" src="images\Volumes\Volume Generic - PY.png" width=100 height=100></img>
     <img align="left" src="images\Volumes\Volume Generic - Height.png" width=100 height=100></img> the other 3 points are unused. Instead the radius will be used.
     This determines the size and position of the trigger area. Beyond that the Y position and height are still applied the same way as the rectangular trigger area.
     <br><br>
     <img align="right" style="margin:10px" src="images\Volumes\Collision Detection - Front.png" width=100 height=100></img>
     <img align="right" src="images\Volumes\Collision Detection - Under.png" width=100 height=100></img>
     Beyond position there are parameters that determine *how* a volume gets triggered. The game needs to know which entities the volume targets (eg the player, enemies, ashlee).
     When that entity enters the area it checks the hit-type to determine *when* the entity triggers the volume. The most simple case is when the hit-type is in *front of*, or directly *under*
     the entity; however, the game can also be set to ensure the entity is *facing a specific angle* as well. The hit angle and open angle determine the facing upon which an entity can trigger the volume. 
     <img align="right" style="margin:10px" src="images\Volumes\Volume Generic - Hit Angle.png" width=100 height=100></img>
     <img align="right" src="images\Volumes\Volume Generic - Open Angle.png" width=100 height=100></img>
     This can be represented with a "fan". The hit angle deteremines the direction the fan faces, and the open angle determines the spread of the "fan". When the entity's viewing angle is 
     within the boundaries of the fan, the event will be triggerable.
     <br><br>
     Finally, once the event has been triggered, the trigger volume will check the type associated with the event. Each type has extra information to know how to do it's job.
     These bits of extra information are called parameters, and they're stored at the end in the parameter buffer area of the event. These parameters tell the game how to handle each event.
     Things such as where to place the player when transitioning rooms, or what item number is needed to progress. Some events don't have any modifiable parameters and rely on hard coded functions
     instead.
     <br><br>


     ---
    references: {
      entity: "#target-type",
      metadata: "#event",
      "shape ": "#area-hit-type",
      functionality: "#active",
      four points of the rectangle: "#position-1",
      Y position: "#y-position",
      "height ": "#height",
      first of the four points: "#position-1",
      radius: "#radius",
      " type": "#type",
      hit angle: "#hit-angle",
      open angle: "#open-angle",
      entities can trigger the volume: "#target-type",
      hit-type: "#hit-type",
      parameter buffer area: "#parameter-buffer-area",
      hard coded functions: "#function-pointer"
    }


  Door Event:
    text: 
     <img align="left" src="images/Events/Door Event.png" width = 200 height = 200></img>
     <img align="left" src="images\Events\Door Event - Locked.png" width = 99 height = 99></img>
     The Door event is used to transition between rooms. When activating a door event the game checks the parameters supplied. It will play a designated "Open Sound"
     from the room's sound table and attempt to load the Next Room in the Next Stage. It will then place the player in the desired Position and Facing 
     supplied in the event parameters. Some doors might be locked. In this case the event must have a lock flag assigned that signifies the current locked
     <img align="left" src="images\Events\Door Event - Unlock Door.png" width = 99 height = 99></img> state of the door. This is stored internally by the game. 
     There are a maximum of 0x3f flags reserved for this purpose. They are stored along with other player information 
     during save. (Validation needed) Doors locked in this manor have a sister door that toggles the locked flag by unlocking it. typically the "other side" of the door. 
     In the event the door is unlocked. The game checks the parameters of the event to pull a sound from the room sound table for unlocking the door. Then it will toggle
     the locked flag.
     <br><br><br>


     ---
    references: {
      parameters: "#door-event-1",
      #Part: TODO
    }