title: MDT File
children:
  Summary:
    text: "
     The MDT File is responsible for the text presented to the screen throughout the game. 
     These text dialogs are typically triggered by an AEV event; however, other things can trigger 
     MDTs such as cutscenes or a sequence. The MDT file can contain multiple languages inside of it.
     Each language contains a list of encoded characters that represent the text that gets presented. 
     These characters are determined by a font file. 
     Some of these characters aren't printed, but instead control *how* the text gets presented. Such as
     font color, or text justification.\n" 
    references: {
      AEV event: aev.md,
      sequence: seq.md,
      font file: fnt.md,
    }
    todo: [
      "Update references 'AEV event' to link to 'AEV event -> Message Event' instead of root of page"
    ]
  Header:
   text: "
    A MDT File is a list of MDT Languages. The header tells us how many languages there are in the file, and where to find them.
    Majority of the time a MDT file contains all the languages supported by the game. This is not always the case though. There is a variation of the
    MDT that only contains one language. These are typically found inside folders that denote their respective language. 
    (eg *BIO4/SS/**eng***, *BIO4/SS/**jap***, etc)<br>\n
    > On update 1.10 Traditional and Simplified Chinese was added to the game. This means that later versions of the
    game have a slight altercation to the format. The update appended the two new MDT Languages to the end of the list 
    **without** updating the count. You can determine if you have a new MDT by checking if the first offset instead of using the count<br>\n
    0x1C: pre  1.10<br>\n
    0x24: post 1.10<br>\n
    > Attempting to correct the field has resulted in the game crashing.\n"
   references: {
     MDT Languages: "#mdt-language"
   }
  MDT Language:
   text: "
    If the MDT File is a list of languages, The MDT Language is a list of MDT Strings. 
    When working with the standard version of the MDT we see a similar structure to the header. There is information about how
    many strings there are in the language, and where to find them. The structure of the MDT Language
    isn't fully mapped out yet though. There is an unknown at the beginning of the language that is suspected to be
    vestigial from the console ports; however, this requires confirmation.\n"
   references: {
     MDT Strings: "#mdt-string",
     this requires confirmation: "https://github.com/Zatarita/re4-wiki/issues/new?title=update-MDT-Unknown"
   }
  MDT String:
   text: "
    The MDT String is a list of 16-bit numbers. These numbers either control how the text gets presented to the screen,
    or they *are* the characters that gets presented to screen. The highest 8-bits (128-255) is the index which gets grabbed
    from the FNT file. The Lowest 8-bits are special characters. There are only 18 of them, and they control
    things such as the flow and presentation of the text.\n"
   references: {
    16-bit numbers: https://en.wikipedia.org/wiki/16-bit_computing,
    special characters: "#special-characters",
    FNT: fnt.md
   }
  Special Characters:
   text: "
    Some characters don't actually contribute to which character is presented to screen; however,
    they are responsible for controlling the flow and appearance of the characters that come after it. Some
    of these characters utilize the next number in the sequence as a modifier. For example the color control character
    has another character after it that defines which color should be selected, or the left justification character has
    distance from the left of the page as the next character.<br>\n
    | Value | Has Modifier | Modifier | Description |\n
    | - | :-: | :-: | :- |\n
    | 0x00 | x |  | Start of string. |\n
    | 0x01 | x |  | End of string. |\n
    | 0x02 | ✓ | Line Number | Insert another string from the room's MDT.  |\n
    | 0x03 | x |  | Newline |\n
    | 0x04 | x |  | Newpage |\n
    | 0x05 | ✓ | Print Speed | Prints each character one character at a time. |\n
    | 0x06 | ✓ | Color Index | Changes the color of all text that comes after this point. The colors are determined by a hard coded color table. Each version has slightly different colors available. |\n
    | 0x07 | x |  | An option to a question. |\n
    | 0x08 | x |  | Wait for player input |\n
    | 0x09 | ✓ | Sleep Duration | Sleep for a specific duration before continuing. |\n
    | 0x0a | x |  | The quantity of the last item picked up. This is persistent between saves and rooms. |\n
    | 0x0b | ✓ | Justification Left | Distance from the left side of the screen where the message will appear |\n
    | 0x0c | ✓ | Justification Top | Distance from the top of the screen where the message will appear. |\n
    | 0x0d | ✓ | Unknown | Currently unknown what this does; however, source code indicates that it does *something* and possibly takes a modifier. |\n
    | 0x0e | x |  | Return from an insertion. Note! If this is called on a string that wasn't inserted it will soft lock the game. Any reference to a seperate MDT entry requires this character to return control back to the main string. |\n
    | 0x0f | ✓ | Line Number | Inserts a string from core_6.mdt |\n
    | 0x10 | x |  | The name of the last item picked up. This is persisten between saves and rooms. |\n
    | 0x11 | ✓ | Line Number | Inserts a string from core_17.mdt |\n
    | 0x12 | ✓ | Character Index | Inserts a character name. This is only used during walkie talkie cutscenes, and only works under certain circumstances. |\n
    "